// Code generated by codegen; DO NOT EDIT.

package ip2x

import "strconv"

//go:generate go run ./internal/codegen dbdata.txt

// IP2Location™ IP Address Geolocation Database provides a solution to deduce
// the geolocation of a device connected to the Internet and to determine the
// approximate geographic location of an IP address along with some other useful
// information like country, region or state, city, latitude and longitude,
// ZIP/Postal code, time zone, Internet Service Provider (ISP) or company name,
// domain name, net speed, area code, weather station code, weather station
// name, mobile country code (MCC), mobile network code (MNC) and carrier brand,
// elevation, usage type, address type and advertising category.
//
// Up to DB25.
const IP2Location DBProduct = 1

// IP2Proxy™ Proxy Detection Database contains IP addresses which are used
// as VPN anonymizer, open proxies, web proxies and Tor exits, data center,
// web hosting (DCH) range, search engine robots (SES) and residential proxies
// (RES).
//
// Up to PX11.
const IP2Proxy DBProduct = 2

// IP address types as defined in Internet Protocol version 4 (IPv4) and
// Internet Protocol version 6 (IPv6).
//   - (A) Anycast - One to the closest
//   - (U) Unicast - One to one
//   - (M) Multicast - One to multiple
//   - (B) Broadcast - One to all
//
// In DB25.
const AddressType DBField = 1

// A varying length number assigned to geographic areas for call between cities.
//
// See https://www.ip2location.com/area-code-coverage.
//
// In DB15-16, DB18, DB20-22, DB24-25.
const AreaCode DBField = 2

// Autonomous system number (ASN).
//
// In PX7-11.
const AS DBField = 3

// Autonomous system (AS) name.
//
// In PX7-11.
const ASN DBField = 4

// The domain category is based on IAB Tech Lab Content Taxonomy.
//
// These categories are comprised of Tier-1 and Tier-2 (if available) level
// categories widely used in services like advertising, Internet security and
// filtering appliances.
//
// See https://www.ip2location.com/free/iab-categories.
//
// In DB25.
const Category DBField = 5

// City name.
//
// In DB3-25, PX3-11.
const City DBField = 6

// Two-character country code based on ISO 3166.
//
// In DB1-25, PX1-11.
const CountryCode DBField = 7

// Country name based on ISO 3166.
//
// In DB1-25, PX1-11.
const CountryName DBField = 8

// Internet domain name associated with IP address range.
//
// In DB7-8, DB10, DB12, DB14, DB16, DB18-20, DB22-25, PX5-11.
const Domain DBField = 9

// Average height of city above sea level in meters (m).
//
// In DB21-22, DB24-25.
const Elevation DBField = 10

// The IDD prefix to call the city from another country.
//
// In DB15-16, DB18, DB20-22, DB24-25.
const IDDCode DBField = 11

// Internet Service Provider or company's name.
//
// In DB2, DB4, DB6-8, DB10, DB12, DB14, DB16, DB18-20, DB22-25, PX4-11.
const ISP DBField = 12

// Proxy last seen in days.
//
// In PX8-11.
const LastSeen DBField = 13

// City latitude. Defaults to capital city latitude if city is unknown.
//
// In DB5-6, DB8-25.
const Latitude DBField = 14

// City longitude. Defaults to capital city longitude if city is unknown.
//
// In DB5-6, DB8-25.
const Longitude DBField = 15

// Mobile Country Codes (MCC) as defined in ITU E.212 for use in identifying
// mobile stations in wireless telephone networks, particularly GSM and UMTS
// networks.
//
// In DB19-20, DB22-25.
const MCC DBField = 16

// Mobile Network Code (MNC) is used in combination with a Mobile Country Code
// (MCC) to uniquely identify a mobile phone operator or carrier.
//
// In DB19-20, DB22-25.
const MNC DBField = 17

// Commercial brand associated with the mobile carrier.
//
// See https://www.ip2location.com/mobile-carrier-coverage.
//
// In DB19-20, DB22-25.
const MobileBrand DBField = 18

// Internet Connection Type
//   - (DIAL) dial up
//   - (DSL) broadband/cable/fiber/mobile
//   - (COMP) company/T1
//
// In DB13-14, DB16-18, DB20, DB22, DB24-25.
const NetSpeed DBField = 19

// Name of VPN provider if available.
//
// In PX11.
const Provider DBField = 20

// Type of proxy.
//   - (VPN) Anonymizing VPN services. These services offer users a publicly
//     accessible VPN for the purpose of hiding their IP address. Anonymity:
//     High.
//   - (TOR) Tor Exit Nodes. The Tor Project is an open network used by those
//     who wish to maintain anonymity. Anonymity: High.
//   - (DCH) Hosting Provider, Data Center or Content Delivery Network.
//     Since hosting providers and data centers can serve to provide anonymity,
//     the Anonymous IP database flags IP addresses associated with them.
//     Anonymity: Low.
//   - (PUB) Public Proxies. These are services which make connection requests
//     on a user's behalf. Proxy server software can be configured by the
//     administrator to listen on some specified port. These differ from VPNs
//     in that the proxies usually have limited functions compare to VPNs.
//     Anonymity: High.
//   - (WEB) Web Proxies. These are web services which make web requests on a
//     user's behalf. These differ from VPNs or Public Proxies in that they
//     are simple web-based proxies rather than operating at the IP address and
//     other ports level. Anonymity: High.
//   - (SES) Search Engine Robots. These are services which perform crawling or
//     scraping to a website, such as, the search engine spider or bots engine.
//     Anonymity: Low.
//   - (RES) Residential proxies. These services offer users proxy connections
//     through residential ISP with or without consents of peers to share their
//     idle resources. Only available with PX10 & PX11. Anonymity: Medium.
//
// In PX2-11.
const ProxyType DBField = 21

// Region or state name.
//
// In DB3-25, PX3-11.
const Region DBField = 22

// Security threat reported.
//   - (SPAM) Email and forum spammers
//   - (SCANNER) Network security scanners
//   - (BOTNET) Malware infected devices
//
// In PX9-11.
const Threat DBField = 23

// UTC time zone (with DST supported).
//
// In DB11-18, DB20-22, DB24-25.
const Timezone DBField = 24

// Usage type classification of ISP or company.
//   - (COM) Commercial
//   - (ORG) Organization
//   - (GOV) Government
//   - (MIL) Military
//   - (EDU) University/College/School
//   - (LIB) Library
//   - (CDN) Content Delivery Network
//   - (ISP) Fixed Line ISP
//   - (MOB) Mobile ISP
//   - (DCH) Data Center/Web Hosting/Transit
//   - (SES) Search Engine Spider
//   - (RSV) Reserved
//
// In DB23-25, PX6-11.
const UsageType DBField = 25

// The special code to identify the nearest weather observation station.
//
// In DB17-18, DB20, DB22, DB24-25.
const WeatherStationCode DBField = 26

// The name of the nearest weather observation station.
//
// In DB17-18, DB20, DB22, DB24-25.
const WeatherStationName DBField = 27

// ZIP code or Postal code.
//
// See https://www.ip2location.com/zip-code-coverage.
//
// In DB9-12, DB14-16, DB18, DB20-22, DB24-25.
const Zipcode DBField = 28

const (
	dbProductUpper = DBProduct(3)
	dbTypeUpper    = DBType(26)
	dbFieldUpper   = DBField(29)
)

type dbft uint8

const (
	dbft_string = 0
	dbft_f32le  = 1
)

type dbfd uint32

func (d dbfd) IsValid() bool    { return d != 0 }
func (d dbfd) Column() uint32   { return uint32((^d >> 12) & 0xFF) }
func (d dbfd) PtrOffset() uint8 { return uint8((^d >> 4) & 0xFF) }
func (d dbfd) Type() dbft       { return dbft((^d >> 0) & 0xF) }

var dbfds = [dbFieldUpper][dbProductUpper][dbFieldUpper]dbfd{
	// ^|   FF   | column number (>1 since 1 is IPFrom)
	// ^|     FF | ptr offset, or direct if FF
	// ^|       F| storage type
	1: {
		IP2Location: { // size: 8
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
		},
		IP2Proxy: { // size: 8
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
		},
	},
	2: {
		IP2Location: { // size: 12
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			ISP:         ^dbfd(0x03000),
		},
		IP2Proxy: { // size: 12
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
		},
	},
	3: {
		IP2Location: { // size: 16
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
		},
		IP2Proxy: { // size: 20
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
		},
	},
	4: {
		IP2Location: { // size: 20
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			ISP:         ^dbfd(0x05000),
		},
		IP2Proxy: { // size: 24
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
			ISP:         ^dbfd(0x06000),
		},
	},
	5: {
		IP2Location: { // size: 24
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
		},
		IP2Proxy: { // size: 28
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
			ISP:         ^dbfd(0x06000),
			Domain:      ^dbfd(0x07000),
		},
	},
	6: {
		IP2Location: { // size: 28
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			ISP:         ^dbfd(0x07000),
		},
		IP2Proxy: { // size: 32
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
			ISP:         ^dbfd(0x06000),
			Domain:      ^dbfd(0x07000),
			UsageType:   ^dbfd(0x08000),
		},
	},
	7: {
		IP2Location: { // size: 24
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			ISP:         ^dbfd(0x05000),
			Domain:      ^dbfd(0x06000),
		},
		IP2Proxy: { // size: 40
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
			ISP:         ^dbfd(0x06000),
			Domain:      ^dbfd(0x07000),
			UsageType:   ^dbfd(0x08000),
			ASN:         ^dbfd(0x09000),
			AS:          ^dbfd(0x0A000),
		},
	},
	8: {
		IP2Location: { // size: 32
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			ISP:         ^dbfd(0x07000),
			Domain:      ^dbfd(0x08000),
		},
		IP2Proxy: { // size: 44
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
			ISP:         ^dbfd(0x06000),
			Domain:      ^dbfd(0x07000),
			UsageType:   ^dbfd(0x08000),
			ASN:         ^dbfd(0x09000),
			AS:          ^dbfd(0x0A000),
			LastSeen:    ^dbfd(0x0B000),
		},
	},
	9: {
		IP2Location: { // size: 28
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Zipcode:     ^dbfd(0x07000),
		},
		IP2Proxy: { // size: 48
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
			ISP:         ^dbfd(0x06000),
			Domain:      ^dbfd(0x07000),
			UsageType:   ^dbfd(0x08000),
			ASN:         ^dbfd(0x09000),
			AS:          ^dbfd(0x0A000),
			LastSeen:    ^dbfd(0x0B000),
			Threat:      ^dbfd(0x0C000),
		},
	},
	10: {
		IP2Location: { // size: 36
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Zipcode:     ^dbfd(0x07000),
			ISP:         ^dbfd(0x08000),
			Domain:      ^dbfd(0x09000),
		},
		IP2Proxy: { // size: 48
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
			ISP:         ^dbfd(0x06000),
			Domain:      ^dbfd(0x07000),
			UsageType:   ^dbfd(0x08000),
			ASN:         ^dbfd(0x09000),
			AS:          ^dbfd(0x0A000),
			LastSeen:    ^dbfd(0x0B000),
			Threat:      ^dbfd(0x0C000),
		},
	},
	11: {
		IP2Location: { // size: 32
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Zipcode:     ^dbfd(0x07000),
			Timezone:    ^dbfd(0x08000),
		},
		IP2Proxy: { // size: 52
			ProxyType:   ^dbfd(0x02000),
			CountryCode: ^dbfd(0x03000),
			CountryName: ^dbfd(0x03030),
			Region:      ^dbfd(0x04000),
			City:        ^dbfd(0x05000),
			ISP:         ^dbfd(0x06000),
			Domain:      ^dbfd(0x07000),
			UsageType:   ^dbfd(0x08000),
			ASN:         ^dbfd(0x09000),
			AS:          ^dbfd(0x0A000),
			LastSeen:    ^dbfd(0x0B000),
			Threat:      ^dbfd(0x0C000),
			Provider:    ^dbfd(0x0D000),
		},
	},
	12: {
		IP2Location: { // size: 40
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Zipcode:     ^dbfd(0x07000),
			Timezone:    ^dbfd(0x08000),
			ISP:         ^dbfd(0x09000),
			Domain:      ^dbfd(0x0A000),
		},
	},
	13: {
		IP2Location: { // size: 32
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Timezone:    ^dbfd(0x07000),
			NetSpeed:    ^dbfd(0x08000),
		},
	},
	14: {
		IP2Location: { // size: 44
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Zipcode:     ^dbfd(0x07000),
			Timezone:    ^dbfd(0x08000),
			ISP:         ^dbfd(0x09000),
			Domain:      ^dbfd(0x0A000),
			NetSpeed:    ^dbfd(0x0B000),
		},
	},
	15: {
		IP2Location: { // size: 40
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Zipcode:     ^dbfd(0x07000),
			Timezone:    ^dbfd(0x08000),
			IDDCode:     ^dbfd(0x09000),
			AreaCode:    ^dbfd(0x0A000),
		},
	},
	16: {
		IP2Location: { // size: 52
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Zipcode:     ^dbfd(0x07000),
			Timezone:    ^dbfd(0x08000),
			ISP:         ^dbfd(0x09000),
			Domain:      ^dbfd(0x0A000),
			NetSpeed:    ^dbfd(0x0B000),
			IDDCode:     ^dbfd(0x0C000),
			AreaCode:    ^dbfd(0x0D000),
		},
	},
	17: {
		IP2Location: { // size: 40
			CountryCode:        ^dbfd(0x02000),
			CountryName:        ^dbfd(0x02030),
			Region:             ^dbfd(0x03000),
			City:               ^dbfd(0x04000),
			Latitude:           ^dbfd(0x05FF1),
			Longitude:          ^dbfd(0x06FF1),
			Timezone:           ^dbfd(0x07000),
			NetSpeed:           ^dbfd(0x08000),
			WeatherStationCode: ^dbfd(0x09000),
			WeatherStationName: ^dbfd(0x0A000),
		},
	},
	18: {
		IP2Location: { // size: 60
			CountryCode:        ^dbfd(0x02000),
			CountryName:        ^dbfd(0x02030),
			Region:             ^dbfd(0x03000),
			City:               ^dbfd(0x04000),
			Latitude:           ^dbfd(0x05FF1),
			Longitude:          ^dbfd(0x06FF1),
			Zipcode:            ^dbfd(0x07000),
			Timezone:           ^dbfd(0x08000),
			ISP:                ^dbfd(0x09000),
			Domain:             ^dbfd(0x0A000),
			NetSpeed:           ^dbfd(0x0B000),
			IDDCode:            ^dbfd(0x0C000),
			AreaCode:           ^dbfd(0x0D000),
			WeatherStationCode: ^dbfd(0x0E000),
			WeatherStationName: ^dbfd(0x0F000),
		},
	},
	19: {
		IP2Location: { // size: 44
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			ISP:         ^dbfd(0x07000),
			Domain:      ^dbfd(0x08000),
			MCC:         ^dbfd(0x09000),
			MNC:         ^dbfd(0x0A000),
			MobileBrand: ^dbfd(0x0B000),
		},
	},
	20: {
		IP2Location: { // size: 72
			CountryCode:        ^dbfd(0x02000),
			CountryName:        ^dbfd(0x02030),
			Region:             ^dbfd(0x03000),
			City:               ^dbfd(0x04000),
			Latitude:           ^dbfd(0x05FF1),
			Longitude:          ^dbfd(0x06FF1),
			Zipcode:            ^dbfd(0x07000),
			Timezone:           ^dbfd(0x08000),
			ISP:                ^dbfd(0x09000),
			Domain:             ^dbfd(0x0A000),
			NetSpeed:           ^dbfd(0x0B000),
			IDDCode:            ^dbfd(0x0C000),
			AreaCode:           ^dbfd(0x0D000),
			WeatherStationCode: ^dbfd(0x0E000),
			WeatherStationName: ^dbfd(0x0F000),
			MCC:                ^dbfd(0x10000),
			MNC:                ^dbfd(0x11000),
			MobileBrand:        ^dbfd(0x12000),
		},
	},
	21: {
		IP2Location: { // size: 44
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			Zipcode:     ^dbfd(0x07000),
			Timezone:    ^dbfd(0x08000),
			IDDCode:     ^dbfd(0x09000),
			AreaCode:    ^dbfd(0x0A000),
			Elevation:   ^dbfd(0x0B000),
		},
	},
	22: {
		IP2Location: { // size: 76
			CountryCode:        ^dbfd(0x02000),
			CountryName:        ^dbfd(0x02030),
			Region:             ^dbfd(0x03000),
			City:               ^dbfd(0x04000),
			Latitude:           ^dbfd(0x05FF1),
			Longitude:          ^dbfd(0x06FF1),
			Zipcode:            ^dbfd(0x07000),
			Timezone:           ^dbfd(0x08000),
			ISP:                ^dbfd(0x09000),
			Domain:             ^dbfd(0x0A000),
			NetSpeed:           ^dbfd(0x0B000),
			IDDCode:            ^dbfd(0x0C000),
			AreaCode:           ^dbfd(0x0D000),
			WeatherStationCode: ^dbfd(0x0E000),
			WeatherStationName: ^dbfd(0x0F000),
			MCC:                ^dbfd(0x10000),
			MNC:                ^dbfd(0x11000),
			MobileBrand:        ^dbfd(0x12000),
			Elevation:          ^dbfd(0x13000),
		},
	},
	23: {
		IP2Location: { // size: 48
			CountryCode: ^dbfd(0x02000),
			CountryName: ^dbfd(0x02030),
			Region:      ^dbfd(0x03000),
			City:        ^dbfd(0x04000),
			Latitude:    ^dbfd(0x05FF1),
			Longitude:   ^dbfd(0x06FF1),
			ISP:         ^dbfd(0x07000),
			Domain:      ^dbfd(0x08000),
			MCC:         ^dbfd(0x09000),
			MNC:         ^dbfd(0x0A000),
			MobileBrand: ^dbfd(0x0B000),
			UsageType:   ^dbfd(0x0C000),
		},
	},
	24: {
		IP2Location: { // size: 80
			CountryCode:        ^dbfd(0x02000),
			CountryName:        ^dbfd(0x02030),
			Region:             ^dbfd(0x03000),
			City:               ^dbfd(0x04000),
			Latitude:           ^dbfd(0x05FF1),
			Longitude:          ^dbfd(0x06FF1),
			Zipcode:            ^dbfd(0x07000),
			Timezone:           ^dbfd(0x08000),
			ISP:                ^dbfd(0x09000),
			Domain:             ^dbfd(0x0A000),
			NetSpeed:           ^dbfd(0x0B000),
			IDDCode:            ^dbfd(0x0C000),
			AreaCode:           ^dbfd(0x0D000),
			WeatherStationCode: ^dbfd(0x0E000),
			WeatherStationName: ^dbfd(0x0F000),
			MCC:                ^dbfd(0x10000),
			MNC:                ^dbfd(0x11000),
			MobileBrand:        ^dbfd(0x12000),
			Elevation:          ^dbfd(0x13000),
			UsageType:          ^dbfd(0x14000),
		},
	},
	25: {
		IP2Location: { // size: 88
			CountryCode:        ^dbfd(0x02000),
			CountryName:        ^dbfd(0x02030),
			Region:             ^dbfd(0x03000),
			City:               ^dbfd(0x04000),
			Latitude:           ^dbfd(0x05FF1),
			Longitude:          ^dbfd(0x06FF1),
			Zipcode:            ^dbfd(0x07000),
			Timezone:           ^dbfd(0x08000),
			ISP:                ^dbfd(0x09000),
			Domain:             ^dbfd(0x0A000),
			NetSpeed:           ^dbfd(0x0B000),
			IDDCode:            ^dbfd(0x0C000),
			AreaCode:           ^dbfd(0x0D000),
			WeatherStationCode: ^dbfd(0x0E000),
			WeatherStationName: ^dbfd(0x0F000),
			MCC:                ^dbfd(0x10000),
			MNC:                ^dbfd(0x11000),
			MobileBrand:        ^dbfd(0x12000),
			Elevation:          ^dbfd(0x13000),
			UsageType:          ^dbfd(0x14000),
			AddressType:        ^dbfd(0x15000),
			Category:           ^dbfd(0x16000),
		},
	},
}

var dbexpcols = [dbFieldUpper][dbProductUpper]uint8{
	1: {
		IP2Location: 2,
		IP2Proxy:    2,
	},
	2: {
		IP2Location: 3,
		IP2Proxy:    3,
	},
	3: {
		IP2Location: 4,
		IP2Proxy:    5,
	},
	4: {
		IP2Location: 5,
		IP2Proxy:    6,
	},
	5: {
		IP2Location: 6,
		IP2Proxy:    7,
	},
	6: {
		IP2Location: 7,
		IP2Proxy:    8,
	},
	7: {
		IP2Location: 6,
		IP2Proxy:    10,
	},
	8: {
		IP2Location: 8,
		IP2Proxy:    11,
	},
	9: {
		IP2Location: 7,
		IP2Proxy:    12,
	},
	10: {
		IP2Location: 9,
		IP2Proxy:    12,
	},
	11: {
		IP2Location: 8,
		IP2Proxy:    13,
	},
	12: {
		IP2Location: 10,
	},
	13: {
		IP2Location: 8,
	},
	14: {
		IP2Location: 11,
	},
	15: {
		IP2Location: 10,
	},
	16: {
		IP2Location: 13,
	},
	17: {
		IP2Location: 10,
	},
	18: {
		IP2Location: 15,
	},
	19: {
		IP2Location: 11,
	},
	20: {
		IP2Location: 18,
	},
	21: {
		IP2Location: 11,
	},
	22: {
		IP2Location: 19,
	},
	23: {
		IP2Location: 12,
	},
	24: {
		IP2Location: 20,
	},
	25: {
		IP2Location: 22,
	},
}

// GoString returns the Go name of the product.
func (p DBProduct) GoString() string {
	return p.product()
}
func (p DBProduct) product() string {
	if p >= 3 {
		return "DBProduct(" + strconv.FormatUint(uint64(p), 10) + ")"
	}
	return _DBProduct_product_str[_DBProduct_product_idx[p]:_DBProduct_product_idx[p+1]]
}

const _DBProduct_product_str = "IP2LocationIP2Proxy"

var _DBProduct_product_idx = [...]int{0, 0, 11, 19}

func (p DBProduct) prefix() string {
	if p >= 3 {
		return "DBProduct(" + strconv.FormatUint(uint64(p), 10) + ")"
	}
	return _DBProduct_prefix_str[_DBProduct_prefix_idx[p]:_DBProduct_prefix_idx[p+1]]
}

const _DBProduct_prefix_str = "DBPX"

var _DBProduct_prefix_idx = [...]int{0, 0, 2, 4}

// GoString returns the Go name of the field.
func (f DBField) GoString() string {
	if f >= 29 {
		return "DBField(" + strconv.FormatUint(uint64(f), 10) + ")"
	}
	return _DBField_GoString_str[_DBField_GoString_idx[f]:_DBField_GoString_idx[f+1]]
}

const _DBField_GoString_str = "AddressTypeAreaCodeASASNCategoryCityCountryCodeCountryNameDomainElevationIDDCodeISPLastSeenLatitudeLongitudeMCCMNCMobileBrandNetSpeedProviderProxyTypeRegionThreatTimezoneUsageTypeWeatherStationCodeWeatherStationNameZipcode"

var _DBField_GoString_idx = [...]int{0, 0, 11, 19, 21, 24, 32, 36, 47, 58, 64, 73, 80, 83, 91, 99, 108, 111, 114, 125, 133, 141, 150, 156, 162, 170, 179, 197, 215, 222}

func (f DBField) column() string {
	if f >= 29 {
		return "DBField(" + strconv.FormatUint(uint64(f), 10) + ")"
	}
	return _DBField_column_str[_DBField_column_idx[f]:_DBField_column_idx[f+1]]
}

const _DBField_column_str = "address_typearea_codeasasncategorycitycountry_codecountry_namedomainelevationidd_codeisplast_seenlatitudelongitudemccmncmobile_brandnet_speedproviderproxy_typeregionthreattime_zoneusage_typeweather_station_codeweather_station_namezip_code"

var _DBField_column_idx = [...]int{0, 0, 12, 21, 23, 26, 34, 38, 50, 62, 68, 77, 85, 88, 97, 105, 114, 117, 120, 132, 141, 149, 159, 165, 171, 180, 190, 210, 230, 238}
